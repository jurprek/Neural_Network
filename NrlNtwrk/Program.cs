using System;
using System.IO;
using System.Linq;
using ExcelDataReader;

class NeuralNetwork
{

    private int inputSize;
    private int hiddenSize1;
    private int hiddenSize2;
    private int outputSize;

    private double[] output;
    private double[,] weights1;
    private double[,] weights2;
    private double[,] weights3;
    private double[] hidden1;
    private double[] hidden2;
    private double[] bias1;
    private double[] bias2;
    private double[] bias3;


    static void Main(string[] args)
    {
        System.Text.Encoding.RegisterProvider(System.Text.CodePagesEncodingProvider.Instance);
        // Učitavanje podataka iz Excela.
        string filePath = @"C:\Users\jpreksavec\Desktop\DataSet01.xlsx";
        List<double[]> inputs = new List<double[]>();
        List<(double, double)> targetOutputs = new List<(double, double)>();
        using (var stream = File.Open(filePath, FileMode.Open, FileAccess.Read))
        {
            using (var reader = ExcelReaderFactory.CreateReader(stream))
            {
                int w = 0;
                while (reader.Read())
                {
                    // Ignoriraj prvi red koji je zaglavlje.
                    if (reader.Depth > 0)
                    {
                        double[] input = new double[20];
                        for (int m = 0; m < 20; m++) {
                            input[m] = (double)reader.GetDouble(m);
                        }
                        double output1 = reader.GetDouble(20);
                        double output2 = reader.GetDouble(21);
                        targetOutputs.Add((output1, output2));
                        inputs.Add(input);
                       /* for (int r  = 0; r < 20; r++) {
                            Console.WriteLine(w + ". " + input[r].ToString()); w++;
                        }
                       */
                    }
                    //Console.WriteLine(w+". DataSet01.xlsx trainer loaded.");
                    w++;
                }
            }
        }

        // Definicija mreže.
        int inputSize = 20;
        int hiddenSize1 = 12;
        int hiddenSize2 = 6;
        NeuralNetwork nn = new NeuralNetwork(inputSize, hiddenSize1, hiddenSize2, 2);

        // Treniranje mreže.
        double learningRate = 0.025;
        int epochs = inputSize;
        for (int j = 0; j < inputs.Count; j++)
        {

            //Console.WriteLine("vector("+j+")  ----> to Train()");
            if (learningRate < 0.00005) learningRate = 0.00005; else learningRate *= 0.99997;
            nn.Train(inputs[j], targetOutputs[j], learningRate);
        }
        double[,] primjer = {
            { 0.1490, 0.5099, 0.37661, -0.6192, -0.59174, -0.00809, 0.53247, -0.515077, 0.407493, -0.9106, -0.3370, -0.0476199, -0.22796, 0.8017, 0.24172, 0.4203, 0.04533, 0.540929, -0.933125, 0.539305 }, // 81 %
            { -0.4649, 0.17665, -0.2107, -0.08921, -0.5958, 0.362617, -0.55707, -0.10903, 0.281384, -0.81309, -0.13954, -0.84013, 0.856531, -0.79735, 0.362592, -0.57548, -0.9549, 0.940136, 0.306131, 0.32432 },
            { -0.79381, 0.561917, 0.124387, 0.803938, -0.22372, -0.78332, 0.896787, -0.97826, 0.990252, 0.61365, 0.220648, 0.120601, 0.521923, 0.765011, 0.035289, -0.88796, -0.44779, -0.02094, -0.6047, 0.32432  },
            { -0.2333, 0.576397, -0.73647, -0.18417, 0.698457, 0.471181, -0.22578, -0.40393, -0.32579, -0.65091, -0.87646, 0.526412, -0.15106, 0.202285, -0.52103, 0.061123, -0.05817, 0.668332, 0.733007, 0.82432  },
            { 0.10774, 0.235272, 0.338, 0.664694, 0.54434, 0.880816, 0.142886, 0.263006, 0.639518, 0.342628, 0.61323, 0.909403, -0.47817, -0.80061, 0.750915, -0.90898, 0.835737, 0.329355, 0.217662, 0.42432  },
            { 0.036086, -0.33671, -0.32175, 0.622437, 0.158403, 0.408799, 0.432763, 0.187294, -0.0939, -0.15798, -0.17026, -0.53457, 0.15949, -0.88593, -0.95954, 0.456371, 0.389603, 0.993939, -0.11227, 0.52432  },
            { -0.25784, -0.59175, 0.119169, 0.656153, -0.66653, -0.72966, -0.465, 0.367703, 0.51204, 0.847283, -0.01865, 0.828711, -0.3578, 0.919156, -0.8565, 0.981319, 0.842529, -0.4037, -0.24169, 0.32432  },
            { 0.552131, -0.1087, -0.77359, 0.048449, 0.64386, -0.4921, 0.77737, 0.551631, -0.45682, -0.36398, 0.301398, -0.31909, 0.369391, 0.632753, 0.141006, -0.85041, 0.322267, -0.42969, -0.34635, 0.7432  },
            { -0.21706, -0.66031, -0.69375, 0.130809, -0.72796, -0.52197, 0.930021, -0.08802, 0.668399, -0.54429, -0.4374, -0.07783, -0.18804, -0.39991, 0.621346, 0.586478, 0.586427, -0.23107, 0.957595, 0.32432  },
            { -0.03403, 0.99981, 0.219334, 0.641439, 0.901445, 0.68821, 0.444771, 0.423315, 0.455698, 0.536018, -0.285, 0.408362, 0.47575, -0.81967, 0.445074, 0.811256, -0.74934, -0.24928, 0.4464, 0.9432  },
            { 0.66087, 0.69755, 0.06695, 0.145548, 0.650759, 0.906018, 0.030859, 0.809533, 0.944963, 0.071479, 0.595646, 0.649483, 0.80164, 0.616642, 0.407233, -0.38305, -0.68296, 0.987899, 0.460225, 0.32432  },
            { 0.337971, 0.245767, 0.568216, 0.103626, 0.022881, 0.629238, 0.057159, -0.52581, -0.85246, 0.80944, -0.76616, 0.356659, 0.154284, 0.312209, -0.65126, 0.116139, -0.23405, -0.36845, 0.707301, 0.32432  },
            { -0.08269, 0.236512, -0.83991, 0.484702, -0.41903, 0.26302, 0.656452, -0.74619, 0.972138, -0.90314, 0.523514, 0.775201, 0.356399, -0.67294, -0.16301, -0.01333, 0.047145, 0.214818, 0.834488, 0.32432  },
            { -0.73092, 0.62425, 0.899906, -0.41323, 0.995189, -0.14591, 0.206167, -0.31111, -0.44597, -0.39743, 0.174527, 0.769217, 0.558273, 0.079125, 0.998364, 0.37562, 0.050601, 0.052906, 0.347405, 0.3432  },
            { -0.82224, 0.121999, 0.802807, -0.74203, 0.553616, 0.15354, -0.56896, -0.54586, -0.92024, -0.50605, 0.059794, -0.2063, -0.14541, 0.75348, 0.827601, 0.709394, -0.54999, 0.640473, -0.3461, 0.32432  },
            { 0.247878, -0.06025, 0.563484, -0.02466, -0.02864, 0.339897, -0.30324, 0.902218, -0.39939, -0.56401, -0.49247, -0.32185, -0.87182, -0.0938, 0.754163, 0.025399, 0.478451, 0.690717, -0.79642, 0.32432  },
            { -0.03875, -0.70535, 0.547687, 0.103545, -0.21147, -0.09457, 0.755469, -0.86616, -0.05956, 0.477182, -0.07912, 0.25583, -0.75239, -0.61162, 0.519305, -0.11073, 0.735064, -0.31386, 0.572547, 0.5432  },
            { 0.050554, 0.606938, 0.07877, 0.069146, -0.34599, -0.15907, -0.66859, -0.68299, -0.80791, 0.830693, 0.371897, 0.612181, 0.136414, -0.34566, 0.381957, -0.98007, -0.26049, 0.321411, 0.900027, 0.3732  },
            { -0.52123, -0.15823, 0.972796, -0.3082, 0.385309, 0.074176, 0.949089, -0.27146, -0.84841, -0.17676, 0.394822, 0.816735, -0.03195, 0.558883, 0.414815, -0.56614, 0.194809, 0.928439, -0.76369, 0.8432  },
            { 0.809049, 0.790673, -0.6865, 0.072126, 0.790721, 0.628, -0.9436, 0.739136, 0.018214, 0.841743, 0.378866, 0.702843, -0.34385, -0.14602, -0.68473, -0.36486, 0.317706, 0.104182, 0.059027, 0.82432  },
            { 0.268659, 0.208261, -0.10206, -0.29665, -0.26104, -0.02867, -0.12786, 0.169592, -0.75504, -0.72001, -0.8154, -0.49283, 0.702987, 0.639801, -0.62413, -0.97538, -0.48814, -0.7559, -0.92069, 0.62432  },
            { -0.49649, 0.531759, 0.00339, 0.564711, -0.0274, 0.566745, 0.717493, -0.93083, 0.325328, 0.498622, -0.86142, -0.44236, 0.709072, -0.18349, -0.23398, 0.098027, -0.76872, -0.86023, -0.73155, 0.32432  },
            { -0.46174, 0.840871, -0.04266, -0.20971, 0.428911, -0.79431, 0.518025, -0.40673, -0.41951, 0.323136, -0.71522, 0.34532, 0.525408, -0.3611, 0.140307, 0.315782, -0.44164, 0.688955, -0.07818, 0.4432  },
            { -0.75149, -0.03446, -0.46465, 0.895676, -0.25792, -0.8635, 0.801397, -0.77974, -0.51353, 0.747268, 0.893764, 0.655583, 0.023009, -0.57337, -0.66504, -0.15326, -0.82892, 0.175634, 0.56008, 0.32432  },
            { -0.424, -0.98564, -0.79799, -0.4204, -0.09863, -0.49144, -0.99619, 0.452037, -0.96724, -0.60653, 0.678453, 0.18072, 0.688977, 0.291312, -0.41557, 0.958234, 0.837904, -0.08237, -0.67638, 0.54332  },
            { -0.01467, -0.58221, -0.96839, 0.580159, 0.987551, 0.153402, -0.95039, -0.76795, 0.307826, 0.468137, 0.246291, -0.93677, -0.3643, 0.900028, 0.252059, -0.37141, 0.766939, -0.45537, 0.716433, 0.672432  },
            { 0.582646, 0.900091, -0.90029, 0.941691, 0.205893, -0.01759, 0.07224, 0.479345, 0.844189, -0.96809, 0.302269, -0.60599, -0.40992, 0.301607, 0.520916, -0.5637, -0.38026, 0.761027, 0.719132, 0.3632  },
            { 0.586419, 0.736896, -0.89117, -0.8606, -0.4373, -0.1109, -0.45315, -0.98498, 0.720525, 0.881272, -0.54646, 0.641219, -0.54881, -0.81466, 0.473086, -0.09294, -0.87579, -0.72964, -0.46366, 0.387832  },
            { -0.54269, -0.51594, 0.745287, -0.78776, 0.517395, 0.055746, 0.8257, -0.34345, 0.461029, -0.04701, 0.045643, 0.154997, 0.363292, 0.889401, -0.11138, -0.56752, -0.38609, 0.78256, -0.05412, 0.324432  },
            { -0.08634, -0.15228, -0.25055, 0.021745, 0.775755, -0.46115, 0.499051, -0.44277, -0.30275, -0.0225, 0.804136, 0.203773, 0.551783, 0.202415, 0.309453, 0.64167, 0.888467, 0.514989, -0.71555, 0.12432  },
            { -0.90238, 0.927529, -0.9887, -0.71297, -0.27255, -0.61092, 0.283927, -0.74259, -0.47112, -0.72998, -0.67693, -0.94842, 0.622748, 0.11031, -0.64279, -0.31466, -0.84094, 0.121546, 0.280881, 0.82432  },
            { -0.0541945916248884, 0.337050199624112, 0.231870195154184, 0.164480909965394, 0.123988875524472, 0.529349051080025, 0.120741195941879, 0.349655362824483, 0.256551776236047, 0.016723662882492, 0.403390922967861, 0.00748234901024892, -0.126456804769331, 0.397702081946411, 0.414703235245152, 0.081401473993651, 0.0101971984325972, 0.343217783593341, 0.355483230973738, 0.294494887535429 },
            { 0.203365342050793, -0.517260975034886, 0.376771895935199, -0.671757794774556, 0.0856701196379239, 0.496181566311523, 0.196216609748201, 0.0425037119466289, 0.27637230856605, 0.0712281697855478, 0.145850088543636, 0.501593280499943, 0.0597175371759516, 0.370346149168578, -0.454341636225649, 0.314966612849448, 0.107614552775183, 0.105582028021711, 0.500568939442093, 0.430785395579598 },
            { -0.254784950402362, 0.505354052737958, 0.451804889710483, 0.146371791707637, 0.511342632725478, 0.298741595574494, -0.269841010497592, 0.412309268061184, 0.103169248058521, 0.185259070980965, -0.37436652740425, -0.338765172312936, 0.163144092565912, -0.618225413095224, 0.302111770907246, 0.338183178728658, 0.374908778717137, -0.642854366565446, 0.183372423828254, 0.110006109228054 },
            { 0.193571488264286, -0.442766887949915, 0.375146666155847, 0.415448638496365, 0.289615660354902, 0.065638332819781, 0.000153713543080342, 0.368387517789012, 0.120561333008021, -0.644576256648501, 0.141295431368134, 0.0725510955705074, 0.297672212596894, -0.182774873438141, 0.084946995922398, 0.416061358308986, -0.404410615086052, 0.383999869799473, 0.384979525585085, -0.237679302324426 },
            { 0.181180896557798, 0.506729815306307, -0.611484937722504, 0.451485675042605, 0.428715367530854, 0.252527627122966, 0.00504965282562341, -0.0345696709598128, 0.357952642758554, 0.0638969024027708, -0.557692748712411, 0.546383233551978, 0.23999477021548, 0.0287241155350019, 0.486132241458829, 0.545926935786345, 0.0709575519510704, 0.271607883040461, 0.39901791602673, 0.141004685065333 },
            { 0.0372705082843363, 0.501946212644699, 0.488873749122944, 0.229702659115984, -0.442573761681905, 0.256774420444441, 0.336344455223638, 0.159779416101193, 0.169079974237181, 0.0795954773847061, 0.277774749838145, 0.537651843400271, 0.244075366243085, -0.324201736345585, 0.470915124362057, 0.223244718900591, 0.366337992373097, 0.341364469614929, 0.493185846345493, 0.503467039435363 },
            { 0.0380803407927487, 0.480408683431985, 0.435672313020551, 0.0609575725327529, -0.345561893659935, 0.447385741157598, 0.261905999700554, 0.416385550820851, 0.019328427621521, -0.158607763778192, 0.332153929867246, 0.121583521193961, 0.328259777363471, 0.21620080980802, 0.0420186352712785, 0.392528308200726, 0.0716795191797605, -0.687541181664882, 0.267834349015372, 0.411927381236863 },
            { 0.42546733404523, 0.220429068689436, 0.0531689848359802, 0.189882811433006, 0.0882735039266384, 0.458545184567383, 0.463560783830046, 0.0978162863989853, 0.0372485400601297, 0.537429086964885, 0.154614529184219, 0.110164042305303, 0.156450096977863, 0.534168784739491, -0.234715647843968, 0.416967823449449, 0.427906535421261, 0.458943643959973, 0.301843742353894, -0.290833454215005 },
            { -0.0623537086698326, 0.0310647997182593, -0.0288479048704351, 0.504306318409403, -0.347010630152019, 0.500806311970852, -0.0778332334147842, 0.285722784292731, -0.399438233832637, -0.642839929081458, -0.694994030504004, 0.199044338248027, 0.281417778098291, 0.00238027322401667, 0.243468984167869, 0.509585955231136, 0.265591431031643, 0.0928314725478229, 0.440374335497722, 0.150722003062318 },
            { 0.330450030308948, -0.069047326080591, -0.637436287990371, 0.494410327323169, 0.203436177960391, 0.249730086643398, 0.259775972632499, 0.474684326488815, 0.225333785002876, 0.268732818462846, 0.0935734856816854, -0.348330940272096, -0.581674484605289, 0.441586864707246, -0.612882690728493, 0.238783458007261, 0.10861973170605, 0.174748398709918, 0.198002981223002, 0.264462412955237 },
            { -0.298770649748532, 0.373307341375313, 0.197730399063819, 0.466919216790587, 0.359829634290677, 0.200354361847409, 0.0813479652748514, -0.127749096500459, 0.0507847201050842, 0.46017979330034, 0.252311010015636, 0.105140235181739, 0.230755604452522, -0.0659907248981032, -0.685191979426054, 0.0366734968354942, 0.15731648832735, 0.278759865326071, -0.0112373910282344, -0.095692907070636 },
            { -0.6266579880173, -0.289842870603139, 0.535947748320559, -0.46741262809172, 0.182059147245456, 0.0786601845915546, 0.106211625841731, 0.147284612965385, -0.0718370798247406, -0.570824396564278, 0.277292304421394, 0.489857522506621, -0.460456414493656, 0.364246813109296, 0.252968703897815, 0.393831672702728, -0.707161134448093, 0.0294209890613621, 0.382595144505559, 0.32318772646774 },
            { 0.139636308316891, 0.191381246087796, -0.456259538535993, 0.277926674428911, 0.200878735873873, 0.469833341226007, 0.016741224797215, 0.0785080601039147, 0.123881230281524, -0.457974970724941, -0.611531678388958, -0.468326225993832, 0.416036274495649, 0.537962293691545, 0.0466894145595521, -0.371296944142167, 0.453607528601919, 0.239120531385757, 0.261135340084524, 0.343694686343669 },
            { 0.376442860033683, 0.0457989901529599, 0.308975741352607, 0.402502112435901, 0.0184519326806269, -0.326829810432735, 0.311119142286013, 0.350330395745075, 0.226561068861683, 0.229887880160294, -0.377258107021673, 0.504926241575912, 0.0345375768471869, -0.587778986275163, -0.659320795529068, 0.0785425284842058, 0.291797820970941, 0.146375203154598, 0.462339407663313, 0.0473504430228379 },
            { -0.525430570643839, 0.0716643392621069, -0.598600028656049, 0.0960988720231007, 0.0335722809189459, 0.273967557135533, 0.320138934049443, -0.727819641470128, 0.50503906544691, 0.511494711498306, -0.153771059008015, -0.353895308719387, -0.215758240624973, 0.245517432852546, 0.540973781379252, -0.749633688026303, 0.0336200117386391, -0.587053900949238, -0.675775924086734, 0.330159017321612 },
            { 0.352790090247911, 0.285893697732549, 0.372045378652387, 0.510406157317496, -0.53721259120515, -0.220738763039017, 0.346664848987155, -0.569116584034925, 0.151289294987467, -0.579672496852343, 0.249566607141011, 0.142643946550585, 0.324641225856717, -0.581997100643606, 0.290915303683772, 0.547204652627992, -0.0064958827739626, 0.457920557988296, 0.214260209293454, -0.598537914672573 },
            { -0.430194393581436, 0.13127491501232, -0.0699867686390804, 0.350634105256103, -0.197761528397081, -0.0870372011364528, -0.67059102078776, 0.317782303419355, 0.161983436725037, -0.633109400692919, 0.236236962249482, 0.144366049598524, 0.104391813194265, -0.420308948458865, 0.484777147268134, -0.704050335741021, 0.281476361846991, 0.0943867956040526, 0.111065148045959, -0.0841172200099394 },
            { 0.257979528512114, 0.0463078178779529, 0.522380100472249, 0.159826700435012, 0.173203551106189, -0.292398531354273, -0.561832278794274, 0.133233792382768, 0.138657546316202, -0.352173675112691, -0.481641715813289, 0.475965525787232, 0.183848560620193, -0.0249018488592706, 0.290704089351048, 0.390946066919882, 0.133707819718106, 0.361365104918374, 0.049459338026852, 0.228002402878117 },
            { 0.440131920770386, -0.627973216720253, 0.420727504837082, 0.162486957109752, -0.450457643409477, 0.414284281049761, 0.289701255179008, -0.564179602553557, 0.465063987361205, 0.469274029617214, 0.098119915806453, -0.554710420020717, 0.00488219558527037, 0.249719497947886, 0.123298382498987, 0.427224942269048, 0.202902762526352, 0.304860807532144, 0.398797176810696, -0.734194493318538 },
            { 0.271159701677817, 0.129554772471499, 0.398007681149065, 0.126542775507522, 0.376512987224249, -0.448550525187119, 0.514595287422094, 0.524903885421731, 0.416332967654958, 0.512870356816706, 0.241817339725684, 0.170535049883437, 0.500788171458255, -0.618024839403925, 0.16102917514319, 0.49676775497597, -0.275922214172503, 0.28519615480914, -0.444914669744111, -0.108081692104599 },
            { 0.453059133498919, -0.217317254893676, 0.216741817750287, 0.13075457385299, 0.236534659565915, 0.262362144505156, 0.371866098328841, -0.513752510191827, 0.532224672572593, 0.444560849404499, 0.00389200059057581, 0.355718664000577, 0.0240447866676264, 0.440386272276448, 0.484849457851411, 0.352910385096465, -0.0968208108951858, 0.198819314259104, 0.337386170070198, -0.184876637046757 },
            { 0.0780808651054455, 0.543786191214371, 0.0960835839051791, 0.346465630532748, 0.0090563973156905, -0.538975351691015, 0.0020386381748596, -0.0354228553092504, 0.268585025030286, 0.430421413703657, 0.251848958852961, 0.0275714471529705, 0.236096275697979, 0.423233718121534, -0.712629100579567, 0.388862963128292, -0.0549583117667292, 0.546936869837053, 0.0291825193367974, -0.731058922663184 },
            { -0.272049020562055, -0.128229463089698, 0.342427186799021, 0.1360994356727, 0.409031263819455, 0.37353756079867, 0.320352166669344, -0.238084112995602, 0.353245290784902, 0.175716160843206, 0.164595144095954, -0.387090342581217, -0.458957712391497, -0.0697141086136872, 0.184488866269142, -0.706727649915426, -0.297351055719888, 0.428094699285514, 0.436706739801468, 0.319281443575905 },
            { 0.163867559355233, 0.110594935031539, 0.34954408166167, -0.0505740807333117, 0.367850884067005, -0.440899196313736, 0.196753400852144, 0.0228850090865412, -0.643441157876725, -0.438290017795995, 0.439855902454159, -0.291288936416911, 0.444328978011552, 0.186144836998279, 0.359686600039419, -0.543256618436064, 0.25088191366241, 0.0712431813831981, 0.526600970662818, 0.50990016088656 },
            { 0.367673880214141, -0.0832291111081223, 0.0281419444509539, 0.260890475425986, 0.443159403151363, 0.52135782600602, 0.304970535212653, 0.536132025117205, -0.430465844277356, 0.543405888497686, 0.0585571178837584, 0.180234619297187, 0.481237229720565, 0.0922262570280816, 0.368586259012023, -0.640127781121854, 0.393087586239605, 0.342229188088711, 0.287973486699981, 0.492467027760417 },
            { 0.212682644331262, 0.361732636667777, 0.232254083727374, -0.533087405413762, 0.0222972654570269, 0.117630602653653, -0.335425910693917, 0.0264716503504629, -0.103251715963062, 0.4844193292321, -0.640576006625688, 0.176176733913735, 0.49340488308754, -0.648438759998074, 0.205516953898584, 0.52306501891344, 0.191312073399389, 0.203905993397014, 0.0945321689401505, -0.738737380733552 },
            { 0.14567640011365, 0.347608148126565, 0.308750516659418, 0.318543999806519, 0.507623354208745, 0.448945750672522, 0.0582587698345506, 0.22284552145073, -0.484275719872634, -0.102396925646691, 0.517341453880139, -0.392228424643318, 0.0398321819919855, 0.218422440486089, -0.500045154946508, 0.0163544902494923, 0.242711166547178, -0.518601973792399, 0.307290250289774, 0.379423924654142 },
            { 0.530427407974707, 0.449561738542143, 0.312310253377193, -0.312364956080985, -0.512321482710259, 0.0478323012316094, 0.0283296839430356, 0.274852731150768, -0.479910796634668, -0.711737342369783, 0.192862339845559, -0.414100174052787, 0.250969549780361, 0.415030876908478, 0.177134514486205, 0.291080233956974, 0.138633038070553, 0.0554464627548483, 0.157761880377107, -0.359390885504801 },
            { -0.498801094015059, 0.50620458252087, 0.237078102097192, -0.167138451654643, -0.36449603296848, 0.382078907670085, 0.441138809124401, -0.565708380281502, 0.1995438557793, 0.16144693865982, -0.0381356923058947, 0.513752693583255, 0.523636466203754, 0.116359542463504, 0.0238656241028193, 0.292525470079471, 0.540674545591707, 0.0648188469529153, 0.340306421162039, -0.49312566937419 },
            { -0.28122479199536, 0.109689468049912, 0.251322371440503, -0.123785005672544, 0.153435215507003, 0.132420708581948, 0.214158261017577, 0.220179518626427, 0.283164239099079, 0.549706621057597, 0.209428614219981, 0.368638553657503, 0.0891303536061896, -0.531991525309311, 0.00591819485554152, 0.548202451006095, -0.209596565830037, 0.467140846486877, 0.452160475094711, 0.209582743866411 },
            { 0.509449176519062, -0.172262663978332, 0.242470243605057, 0.315009464570557, 0.0662215428509967, -0.572071859020538, 0.361941443126099, -0.0662480093838838, -0.238630999567316, 0.0564540102047851, 0.357662769863887, 0.0982504958004053, 0.400174470123974, -0.184759036929391, -0.67370809782987, 0.453049247484689, -0.552785526118325, 0.500481460576054, 0.271868787177435, -0.591027623249703 },
            { 0.1,0.1,0.1,-0.15,-0.10,-0.75,0.1,-0.1,0,0,0,0,0,0,0,0,0,0,0,0 },
            { 1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1 },
            { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
            { -1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1 }
        };

        int red;
        for (int t = 0; t < 66; t++)
        {
             red = t;
             double[] Row = new double[primjer.GetLength(1)];
            for (int i = 0; i < primjer.GetLength(1); i++)
            {
                Row[i] = primjer[red, i];
            }

            double SigmoidajRedak(double[] x)
            {
                double Sgm = 0;
                for (int i = 0; i < 20; i++)
                {
                    Sgm += x[i];
                }
                return 1 / (1 + Math.Exp(-Sgm));
            }

            Console.WriteLine(Math.Round(nn.Predict(Row, 0)[1] * 100, 3) + " %    -->   " + Math.Round(SigmoidajRedak(Row) * 100, 3) + " %.");          
        }
        Console.ReadLine();
    }


    private NeuralNetwork(int inputSize, int hiddenSize1, int hiddenSize2, int outputSize)
    {
        this.inputSize = inputSize;
        this.hiddenSize1 = hiddenSize1;
        this.hiddenSize2 = hiddenSize2;
        this.outputSize = outputSize;

        hidden1 = new double[hiddenSize1];
        for (int i = 0; i < hiddenSize1; i++)
        {
            hidden1[i] = 0; // set each element to 0
        }
        hidden2 = new double[hiddenSize2];
        for (int i = 0; i < hiddenSize2; i++)
        {
            hidden2[i] = 0; // set each element to 0
        }

        // Inicijalizacija težina i pomaka slučajnim vrijednostima između -1 i 1.
        Random rand = new Random();

        weights1 = new double[inputSize, hiddenSize1];
        for (int i = 0; i < inputSize; i++)
        {
            for (int j = 0; j < hiddenSize1; j++)
            {
                weights1[i, j] = 0.5;// rand.NextDouble() * 2 - 1;
            }
        }

        weights2 = new double[hiddenSize1, hiddenSize2];
        for (int i = 0; i < hiddenSize1; i++)
        {
            for (int j = 0; j < hiddenSize2; j++)
            {
                weights2[i, j] = 0.5;// rand.NextDouble() * 2 - 1;
            }
        }

        weights3 = new double[hiddenSize2, outputSize];
        for (int i = 0; i < hiddenSize2; i++)
        {
            for (int j = 0; j < outputSize; j++)
            {
                weights3[i, j] = 0.5;// rand.NextDouble() * 2 - 1;
            }
        }

        bias1 = new double[hiddenSize1];
        for (int i = 0; i < hiddenSize1; i++)
        {
            bias1[i] = 0;// rand.NextDouble() * 2 - 1;
        }

        bias2 = new double[hiddenSize2];
        for (int i = 0; i < hiddenSize2; i++)
        {
            bias2[i] = 0;// rand.NextDouble() * 2 - 1;
        }

        bias3 = new double[outputSize];
        for (int i = 0; i < outputSize; i++)
        {
            bias3[i] = 0;// rand.NextDouble() * 2 - 1;
        }
    }



    private double Sigmoid(double x)
    {
        return 1.0 / (1.0 + Math.Exp(-1*x));
    }
    private double Gradient(double x)
    {
        return 0;
    }



    public double[] Predict(double[] input, int x)
    {
        // Propagacija ulaza kroz mrežu.
        double[] hidden1 = new double[hiddenSize1];
        for (int i = 0; i < hiddenSize1; i++)
        {
            double sum = 0;
            for (int j = 0; j < inputSize; j++)
            {
                sum += input[j] * weights1[j, i];
            }
            hidden1[i] = Sigmoid(sum + bias1[i]);
        }

        double[] hidden2 = new double[hiddenSize2];
        for (int i = 0; i < hiddenSize2; i++)
        {
            double sum = 0;
            for (int j = 0; j < hiddenSize1; j++)
            {
                sum += hidden1[j] * weights2[j, i];
            }
            hidden2[i] = Sigmoid(sum + bias2[i]);
        }

        double[] output = new double[outputSize];
        for (int i = 0; i < outputSize; i++)
        {
            double sum = 0;
            for (int j = 0; j < hiddenSize2; j++)
            {
                sum += hidden2[j] * weights3[j, i];
            }
            output[i] = Sigmoid(sum + bias3[i]);
        }

        // Izračun pogreške izlaza.
        double[] targetOutput = { 0, 0 };
        double[] outputError = new double[outputSize];

        for (int i = 0; i < outputSize; i++)
        {
            outputError[i] = (targetOutput[i] - output[i]) * output[i] * (1 - output[i]);
        }

        if (x == 1) {
            Console.WriteLine("Hidden layer 1 values:");
            for (int i = 0; i < hiddenSize1; i++)
            {
                Console.WriteLine($"Node {i + 1}: {hidden1[i]}");
            }

            Console.WriteLine("\nHidden layer 2 values:");
            for (int i = 0; i < hiddenSize2; i++)
            {
                Console.WriteLine($"Node {i + 1}: {hidden2[i]}");
            }

            Console.WriteLine("\nOutput values:");
            for (int i = 0; i < outputSize; i++)
            {
                Console.WriteLine($"Node {i + 1}: {output[i]}");
            }

            Console.WriteLine("\nOutput error:");
            for (int i = 0; i < outputSize; i++)
            {
                Console.WriteLine($"Node {i + 1}: {outputError[i]}");
            }
        }
        return output;
    }



    //Treniranje Neuralne Mreže --------------------------------------------------
    public void Train(double[] input, (double, double) targetOutput, double learningRate)
    {
        // Propagacija unaprijed
        for (int i = 0; i < hiddenSize1; i++)
        {
            double sum = 0;
            for (int j = 0; j < inputSize; j++)
            {
                sum += input[j] * weights1[j, i];
            }
            hidden1[i] = Sigmoid(sum + bias1[i]);
        }
        for (int i = 0; i < hiddenSize2; i++)
        {
            double sum = 0;
            for (int j = 0; j < hiddenSize1; j++)
            {
                sum += hidden1[j] * weights2[j, i];
            }
            hidden2[i] = Sigmoid(sum + bias2[i]);
        }
        for (int i = 0; i < outputSize; i++)
        {
            double sum = 0;
            for (int j = 0; j < hiddenSize2; j++)
            {
                sum += hidden2[j] * weights3[j, i];
            }
            output = new double[outputSize];
            output[i] = Sigmoid(sum + bias3[i]);
        }

        // Propagacija unatrag
        double[] outputError = new double[outputSize];
        for (int i = 0; i < outputSize; i++)
        {
            outputError[i] = (targetOutput.Item1 - output[i]) * output[i] * (1 - output[i]);
        }
        double[] hidden2Error = new double[hiddenSize2];
        for (int i = 0; i < hiddenSize2; i++)
        {
            double sum = 0;
            for (int j = 0; j < outputSize; j++)
            {
                sum += outputError[j] * weights3[i, j];
            }
            hidden2Error[i] = sum * hidden2[i] * (1 - hidden2[i]);
        }
        double[] hidden1Error = new double[hiddenSize1];
        for (int i = 0; i < hiddenSize1; i++)
        {
            double sum = 0;
            for (int j = 0; j < hiddenSize2; j++)
            {
                sum += hidden2Error[j] * weights2[i, j];
            }
            hidden1Error[i] = sum * hidden1[i] * (1 - hidden1[i]);
        }

        // Ažuriranje težina i pomaka
        for (int i = 0; i < outputSize; i++)
        {
            for (int j = 0; j < hiddenSize2; j++)
            {
                weights3[j, i] += learningRate * outputError[i] * hidden2[j];
            }
            bias3[i] += learningRate * outputError[i];
        }
        for (int i = 0; i < hiddenSize2; i++)
        {
            for (int j = 0; j < hiddenSize1; j++)
            {
                weights2[j, i] += learningRate * hidden2Error[i] * hidden1[j];
            }
            bias2[i] += learningRate * hidden2Error[i];
        }
        for (int i = 0; i < hiddenSize1; i++)
        {
            for (int j = 0; j < inputSize; j++)
            {
                weights1[j, i] += learningRate * hidden1Error[i] * input[j];
            }
            bias1[i] += learningRate * hidden1Error[i];
        }
    }
}